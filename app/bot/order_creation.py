# order_creation.py
from telebot import types
from app.bot.instance import bot

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
temp_orders = {}

def create_order(message, manager_panel):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    order_data = {}

    # –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üöö *–®–∞–≥ 1/8: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏ —ç–≤–∞–∫—É–∞—Ç–æ—Ä–∞*\n"
        "–ü—Ä–∏–º–µ—Ä: _–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 42_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    bot.register_next_step_handler(msg, lambda msg: process_address_from(msg, order_data, manager_panel))

def process_address_from(message, order_data, manager_panel):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(message.text) < 5:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(msg, lambda msg: process_address_from(msg, order_data, manager_panel))
        return

    order_data['address_from'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üèÅ *–®–∞–≥ 2/8: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è*\n"
        "–ü—Ä–∏–º–µ—Ä: _–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 15_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_address_to(msg, order_data, manager_panel))
def process_address_to(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    if len(message.text) < 5:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(msg, lambda msg: process_address_to(msg, order_data, manager_panel))
        return

    order_data['address_to'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üöó *–®–∞–≥ 3/8: –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è*\n"
        "–ü—Ä–∏–º–µ—Ä: _Toyota Camry 2020 –≥–æ–¥–∞_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_car_model(msg, order_data, manager_panel))


def process_car_model(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    order_data['car_model'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üì± *–®–∞–≥ 4/8: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞*\n"
        "–§–æ—Ä–º–∞—Ç: _89161234567_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg,  lambda msg: process_client_phone(msg, order_data, manager_panel))


def process_client_phone(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    phone = message.text.strip()
    if not (phone[1:].isdigit() and len(phone) >= 11):
        msg = bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "_89161234567_",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(msg, lambda msg: process_client_phone(msg, order_data, manager_panel))
        return

    order_data['phone'] = phone

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üíµ *–®–∞–≥ 5/8: –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏*\n"
        "–ü—Ä–∏–º–µ—Ä: _3500_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg,  lambda msg: process_price(msg, order_data, manager_panel))


def process_price(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3500):")
        bot.register_next_step_handler(msg, lambda msg: process_price(msg, order_data, manager_panel))
        return

    order_data['price'] = price

    # –ó–∞–ø—Ä–æ—Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üë§ *–®–∞–≥ 6/8: –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)*",
        parse_mode="Markdown",
        reply_markup=skip_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_client_name(msg, order_data, manager_panel))


def process_client_name(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        order_data['client_name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        order_data['client_name'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üîß *–®–∞–≥ 7/8: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)*\n"
        "–ü—Ä–∏–º–µ—Ä: _–ú–æ–π–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞ –∫–ª—é—á–µ–π, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ_",
        parse_mode="Markdown",
        reply_markup=skip_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_extra_services(msg, order_data, manager_panel))


def process_extra_services(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        order_data['extra_services'] = "–ù–µ—Ç"
    else:
        order_data['extra_services'] = message.text

    # –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üìù *–®–∞–≥ 8/8: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)*",
        parse_mode="Markdown",
        reply_markup=skip_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_comment(msg, order_data, manager_panel))


def process_comment(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message, manager_panel)
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        order_data['comment'] = "–ù–µ—Ç"
    else:
        order_data['comment'] = message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    order_text = format_order(order_data)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_markup = types.InlineKeyboardMarkup()
    confirm_markup.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_order_{message.chat.id}"),
        types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"restart_order_{message.chat.id}")
    )

    bot.send_message(
        message.chat.id,
        f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n\n{order_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞?",
        parse_mode="Markdown",
        reply_markup=confirm_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    global temp_orders
    temp_orders[message.chat.id] = order_data


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def cancel_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"))
    return markup


def skip_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"))
    return markup


def format_order(data):
    return (
        f"üöö *–û—Ç–∫—É–¥–∞:* {data.get('address_from', '')}\n"
        f"üèÅ *–ö—É–¥–∞:* {data.get('address_to', '')}\n"
        f"üöó *–ê–≤—Ç–æ:* {data.get('car_model', '')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone', '')}\n"
        f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {data.get('price', '')} —Ä—É–±\n"
        f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîß *–î–æ–ø.—É—Å–ª—É–≥–∏:* {data.get('extra_services', '–ù–µ—Ç')}\n"
        f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {data.get('comment', '–ù–µ—Ç')}"
    )


def cancel_order(message, manager_panel):
    bot.send_message(message.chat.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
    manager_panel(message)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
temp_orders = {}


