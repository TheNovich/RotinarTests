'–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pyTelegramBotApi'
from telebot.types import Message
from telebot import types
from telebot.handler_backends import State, StatesGroup
'from handlers import manager_panel'

'–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –î–ë'
from app.database.crud import check_user_role, search_number, update_data_tg_id, switch_driver_status, switch_driver_shift, supabase
'from app.bot.handlers import driver_panel, manager_panel'

from app.bot.instance import bot

class OrderStates(StatesGroup):
    address_from = State()
    address_to = State()
    car_model = State()
    phone = State()
    price = State()
    client_name = State()
    extra_services = State()
    comment = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
def cancel_order(message, manager_panel):
    bot.delete_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    manager_panel(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫—É—é –ø–∞–Ω–µ–ª—å

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (address_from, address_to, –∏ —Ç.–¥.)
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å @bot.message_handler(state=OrderStates.address_from)
# –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ manager_panel –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞


def create_order(message, manager_panel):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    order_data = {}

    # –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üöö *–®–∞–≥ 1/8: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏ —ç–≤–∞–∫—É–∞—Ç–æ—Ä–∞*\n"
        "–ü—Ä–∏–º–µ—Ä: _–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 42_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    bot.register_next_step_handler(msg, lambda msg: process_address_from(msg, order_data, manager_panel))


def process_address_from(message, order_data, manager_panel):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(message.text) < 5:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(msg, lambda msg: process_address_from(msg, order_data, manager_panel))
        return

    order_data['address_from'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üèÅ *–®–∞–≥ 2/8: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è*\n"
        "–ü—Ä–∏–º–µ—Ä: _–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 15_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_address_to(msg, order_data, manager_panel))


def process_address_to(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    if len(message.text) < 5:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(msg, lambda msg: process_address_to(msg, order_data, manager_panel))
        return

    order_data['address_to'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üöó *–®–∞–≥ 3/8: –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è*\n"
        "–ü—Ä–∏–º–µ—Ä: _Toyota Camry 2020 –≥–æ–¥–∞_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_car_model(msg, order_data, manager_panel))


def process_car_model(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    order_data['car_model'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üì± *–®–∞–≥ 4/8: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞*\n"
        "–§–æ—Ä–º–∞—Ç: _89161234567_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg,  lambda msg: process_client_phone(msg, order_data, manager_panel))


def process_client_phone(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    phone = message.text.strip()
    if not (phone[1:].isdigit() and len(phone) >= 11):
        msg = bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "_89161234567_",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(msg, lambda msg: process_client_phone(msg, order_data, manager_panel))
        return

    order_data['phone'] = phone

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üíµ *–®–∞–≥ 5/8: –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏*\n"
        "–ü—Ä–∏–º–µ—Ä: _3500_",
        parse_mode="Markdown",
        reply_markup=cancel_markup()
    )
    bot.register_next_step_handler(msg,  lambda msg: process_price(msg, order_data, manager_panel))


def process_price(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3500):")
        bot.register_next_step_handler(msg, lambda msg: process_price(msg, order_data, manager_panel))
        return

    order_data['price'] = price

    # –ó–∞–ø—Ä–æ—Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üë§ *–®–∞–≥ 6/8: –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)*",
        parse_mode="Markdown",
        reply_markup=skip_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_client_name(msg, order_data, manager_panel))


def process_client_name(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        order_data['client_name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        order_data['client_name'] = message.text

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üîß *–®–∞–≥ 7/8: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)*\n"
        "–ü—Ä–∏–º–µ—Ä: _–ú–æ–π–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞ –∫–ª—é—á–µ–π, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ_",
        parse_mode="Markdown",
        reply_markup=skip_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_extra_services(msg, order_data, manager_panel))


def process_extra_services(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message)
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        order_data['extra_services'] = "–ù–µ—Ç"
    else:
        order_data['extra_services'] = message.text

    # –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    msg = bot.send_message(
        message.chat.id,
        "üìù *–®–∞–≥ 8/8: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)*",
        parse_mode="Markdown",
        reply_markup=skip_markup()
    )
    bot.register_next_step_handler(msg, lambda msg: process_comment(msg, order_data, manager_panel))


def process_comment(message, order_data, manager_panel):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
        cancel_order(message, manager_panel)
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        order_data['comment'] = "–ù–µ—Ç"
    else:
        order_data['comment'] = message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    order_text = format_order(order_data)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_markup = types.InlineKeyboardMarkup()
    confirm_markup.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_order_{message.chat.id}"),
        types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"restart_order_{message.chat.id}")
    )

    bot.send_message(
        message.chat.id,
        f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n\n{order_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞?",
        parse_mode="Markdown",
        reply_markup=confirm_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    global temp_orders
    temp_orders[message.chat.id] = order_data


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def cancel_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"))
    return markup


def skip_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"))
    return markup


def format_order(data):
    return (
        f"üöö *–û—Ç–∫—É–¥–∞:* {data.get('address_from', '')}\n"
        f"üèÅ *–ö—É–¥–∞:* {data.get('address_to', '')}\n"
        f"üöó *–ê–≤—Ç–æ:* {data.get('car_model', '')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone', '')}\n"
        f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {data.get('price', '')} —Ä—É–±\n"
        f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîß *–î–æ–ø.—É—Å–ª—É–≥–∏:* {data.get('extra_services', '–ù–µ—Ç')}\n"
        f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {data.get('comment', '–ù–µ—Ç')}"
    )


def cancel_order(message, manager_panel):
    bot.send_message(message.chat.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
    manager_panel(message)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
temp_orders = {}





# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def save_order_to_db(order_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    import random
    return random.randint(1000, 9999)

'–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π'
def role_required(*allowed_roles):
    def decorator(func):
        def wrapper(message: Message, *args, **kwargs):
            user_role = check_user_role(message.from_user.id)
            if user_role not in allowed_roles:
                bot.reply_to(message, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
                return
            return func(message, *args, **kwargs)

        return wrapper

    return decorator

'–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–¥'
def process_phone(message, driver_panel, manager_panel):
    phone = message.text
    if not phone.isdigit() or len(phone) != 11:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        registration(message, driver_panel, manager_panel)
    elif search_number(phone) == 0:
        bot.send_message(message.chat.id, '‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!')
        registration(message, driver_panel, manager_panel)
    else:
        update_data_tg_id('users', {
            'telegram_id': message.from_user.id,
            'telegram_name': message.from_user.username
        }, phone)
        role = check_user_role(message.chat.id)
        '''bot.send_message(message.chat.id, f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –†–æ–ª—å: {role}')'''
        user_verification(message, driver_panel, manager_panel)


def on_click_driver_panel(message, driver_panel):
    if message.text == '–í–∑—è—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 1, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É! \n–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É')
    elif message.text == '–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É':
        start_driver_shift(message)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É':
        finish_driver_shift(message)
    elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–∞–ø—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 2, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏"')
    elif message.text == '–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏':
        driver_next_status(message, 3, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏"')
    elif message.text == '–†–∞–∑–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 4, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è. \n–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"')
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 5, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑. \n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞')

    driver_panel(message)

def driver_next_status(message, next_status_id, message_to_user):
    switch_driver_status(next_status_id, message.from_user.id)
    bot.reply_to(message, message_to_user)

def start_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(True, tg_id)
    bot.send_message(message.chat.id, '–í—ã –Ω–∞ —Å–º–µ–Ω–µ!')

def finish_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(False, tg_id)
    bot.send_message(message.chat.id, '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

def registration(message, driver_panel, manager_panel):
    msg = bot.send_message(message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89991112233 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤):')
    bot.register_next_step_handler(msg, lambda msg: process_phone(msg, driver_panel, manager_panel))

def role_commands(message, role, driver_panel, manager_panel):
    if role == 'driver':
        driver_panel(message)
    elif role == 'manager':
        manager_panel(message)

def on_click_manager_panel(message, manager_panel):
    if message.text == '–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏':
        free_drivers = supabase.table('users') \
            .select('last_name', 'first_name', 'surname', 'phone_number') \
            .or_('and(role.eq.driver, state_id.eq.5)') \
            .execute()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers_list = []
        for driver in free_drivers.data:
            driver_info = (
                f"–§–∞–º–∏–ª–∏—è: {driver['last_name']}\n"
                f"–ò–º—è: {driver['first_name']}\n"
                f"–û—Ç—á–µ—Å—Ç–≤–æ: {driver['surname']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver['phone_number']}\n"
                "-------------------------"
            )
            drivers_list.append(driver_info)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if drivers_list:
            response = "–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n\n" + "\n".join(drivers_list)
        else:
            response = "–°–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, response)
        manager_panel(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    elif message.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑':
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        create_order(message, manager_panel)
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º manager_panel –∑–¥–µ—Å—å - FSM –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–º

    else:
        bot.reply_to(message, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        manager_panel(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

def user_verification(message, driver_panel, manager_panel):
    response = supabase.table('users').select('telegram_id', count='exact').eq('telegram_id', message.chat.id).execute()
    if response.count != 0:
        role = check_user_role(message.chat.id)
        bot.send_message(message.chat.id, f'‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–∞—à–∞ —Ä–æ–ª—å: {role}')
        role_commands(message, role, driver_panel, manager_panel)
    else:
        registration(message, driver_panel, manager_panel)