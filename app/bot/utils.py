'–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pyTelegramBotApi'
from telebot.types import Message
from telebot import types
from telebot.handler_backends import State, StatesGroup
from app.bot.order_creation import create_order

'from handlers import manager_panel'

'–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –î–ë'
from app.database.crud import check_user_role, search_number, update_data_tg_id, switch_driver_status, switch_driver_shift, supabase
'from app.bot.handlers import driver_panel, manager_panel'

from app.bot.instance import bot

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def save_order_to_db(order_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    import random
    return random.randint(1000, 9999)

'–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π'
def role_required(*allowed_roles):
    def decorator(func):
        def wrapper(message: Message, *args, **kwargs):
            user_role = check_user_role(message.from_user.id)
            if user_role not in allowed_roles:
                bot.reply_to(message, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
                return
            return func(message, *args, **kwargs)

        return wrapper

    return decorator

'–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–¥'
def process_phone(message, driver_panel, manager_panel):
    phone = message.text
    if not phone.isdigit() or len(phone) != 11:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        registration(message, driver_panel, manager_panel)
    elif search_number(phone) == 0:
        bot.send_message(message.chat.id, '‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!')
        registration(message, driver_panel, manager_panel)
    else:
        update_data_tg_id('users', {
            'telegram_id': message.from_user.id,
            'telegram_name': message.from_user.username
        }, phone)
        role = check_user_role(message.chat.id)
        '''bot.send_message(message.chat.id, f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –†–æ–ª—å: {role}')'''
        user_verification(message, driver_panel, manager_panel)


def on_click_driver_panel(message, driver_panel):
    if message.text == '–í–∑—è—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 1, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É! \n–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É')
    elif message.text == '–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É':
        start_driver_shift(message)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É':
        finish_driver_shift(message)
    elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–∞–ø—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 2, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏"')
    elif message.text == '–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏':
        driver_next_status(message, 3, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏"')
    elif message.text == '–†–∞–∑–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 4, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è. \n–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"')
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 5, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑. \n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞')

    driver_panel(message)

def driver_next_status(message, next_status_id, message_to_user):
    switch_driver_status(next_status_id, message.from_user.id)
    bot.reply_to(message, message_to_user)

def start_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(True, tg_id)
    bot.send_message(message.chat.id, '–í—ã –Ω–∞ —Å–º–µ–Ω–µ!')

def finish_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(False, tg_id)
    bot.send_message(message.chat.id, '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

def registration(message, driver_panel, manager_panel):
    msg = bot.send_message(message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89991112233 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤):')
    bot.register_next_step_handler(msg, lambda msg: process_phone(msg, driver_panel, manager_panel))

def role_commands(message, role, driver_panel, manager_panel):
    if role == 'driver':
        driver_panel(message)
    elif role == 'manager':
        manager_panel(message)

def on_click_manager_panel(message, manager_panel):
    if message.text == '–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏':
        free_drivers = supabase.table('users') \
            .select('last_name', 'first_name', 'surname', 'phone_number') \
            .or_('and(role.eq.driver, state_id.eq.5)') \
            .execute()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers_list = []
        for driver in free_drivers.data:
            driver_info = (
                f"–§–∞–º–∏–ª–∏—è: {driver['last_name']}\n"
                f"–ò–º—è: {driver['first_name']}\n"
                f"–û—Ç—á–µ—Å—Ç–≤–æ: {driver['surname']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver['phone_number']}\n"
                "-------------------------"
            )
            drivers_list.append(driver_info)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if drivers_list:
            response = "–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n\n" + "\n".join(drivers_list)
        else:
            response = "–°–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, response)
        manager_panel(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    elif message.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑':
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        create_order(message, manager_panel)
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º manager_panel –∑–¥–µ—Å—å - FSM –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–º

    else:
        bot.reply_to(message, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        manager_panel(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

def user_verification(message, driver_panel, manager_panel):
    response = supabase.table('users').select('telegram_id', count='exact').eq('telegram_id', message.chat.id).execute()
    if response.count != 0:
        role = check_user_role(message.chat.id)
        bot.send_message(message.chat.id, f'‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–∞—à–∞ —Ä–æ–ª—å: {role}')
        role_commands(message, role, driver_panel, manager_panel)
    else:
        registration(message, driver_panel, manager_panel)